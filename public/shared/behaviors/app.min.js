'use strict';

(function () {

	'use strict';

	angular.module('ListaTelefonica', ['ngRoute', 'ngSanitize', 'ngComponents']);

	if ('serviceWorker' in navigator) {
		navigator.serviceWorker.register('./service-worker.js').then(function () {
			console.log('[ServiceWorker] Registered');
		});
	}
})();
"use strict";

(function () {

	'use strict';

	// Factories are similars with Service and Providers.

	angular.module("ListaTelefonica").factory("contatosAPI", ['$http', 'config', contatosAPI]);

	function contatosAPI($http, config) {

		var _getContatos = function _getContatos(scope) {
			return $http.get(config.oapiUrl + "/contatos").then(function (data) {
				scope.contatos = JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível carregar os dados!";
			});
		};

		var _getContatosInScope = function _getContatosInScope() {
			return $http.get(config.oapiUrl + "/contatos").then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				return [];
			});
		};

		var _getContato = function _getContato(id) {
			return $http.get(config.oapiUrl + "/contatos/" + id).then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			}).catch(function (response) {
				return "Aconteceu um problema: Não foi possível carregar os dados!";
			});
		};

		var _saveContato = function _saveContato(scope, contato) {
			$http.post(config.oapiUrl + "/contatos", contato).then(function (data) {
				delete scope.contato;
				scope.contatoForm.$setPristine();
				scope.contatos.push(JSON.parse(JSON.stringify(data.data)));
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível salvar o contato!";
			});
		};

		var _deleteContato = function _deleteContato(scope, contato) {
			$http.delete(config.oapiUrl + "/contatos/" + contato.id).then(function (data) {
				scope.contatos.splice(scope.contatos.indexOf(contato), 1);
			}).catch(function (response) {
				scope.error = "Aconteceu um problema: Não foi possível deletar o contato!";
			});
		};

		return {
			getContatos: _getContatos,
			getContatosInScope: _getContatosInScope,
			getContato: _getContato,
			saveContato: _saveContato,
			deleteContato: _deleteContato
		};
	}
})();
"use strict";

(function () {

	'use strict';

	angular.module("ListaTelefonica").controller("DetalhesContatoController", ['$scope', '$routeParams', 'contatosAPI', DetalhesContatoController]);

	function DetalhesContatoController($scope, $routeParams, contatosAPI) {

		console.log('here');

		$scope.contato = [];

		console.log($routeParams);

		contatosAPI.getContato($routeParams.id).then(function (contato) {
			$scope.contato = contato;
		});
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("ListaTelefonicaController", ['$rootScope', '$scope', '$timeout', 'contatosAPI', 'serialGenerator', ListaTelefonicaController]);

    function ListaTelefonicaController($rootScope, $scope, $timeout, contatosAPI, serialGenerator) {

        $scope.app = "Lista Telefônica";
        $scope.contatos = [];

        contatosAPI.getContatosInScope().then(function (contatos) {
            $scope.contatos = contatos;

            $scope.contatosNgTable = {
                data: 'contatos',
                class: 'table table-hover table-striped table-bordered table-condensed table-list table-stroke',
                search: 'pesquisarDados',
                select: 'selecionado',
                visualisable: 'visualizavel',
                editable: 'editavel',
                deletable: 'deletavel',
                columnDefs: [{
                    field: 'serial',
                    displayName: 'Serial',
                    hide: 'phone,tablet',
                    sort: true,
                    width: "10%",
                    priority: 4
                }, {
                    field: 'nome',
                    displayName: 'Nome',
                    sort: true,
                    width: "50%",
                    filter: 'capitalize',
                    priority: 1
                }, {
                    field: 'telefone',
                    displayName: 'Telefone',
                    hide: 'phone,tablet',
                    sort: true,
                    width: '20%',
                    priority: 3
                }, {
                    field: 'data',
                    displayName: 'Data',
                    sort: true,
                    width: '20%',
                    filter: 'date',
                    hide: 'phone',
                    priority: 2
                }],
                pager: { enable: true, startPage: 1, limitPerPage: 2, sizes: [2, 5, 8, 10], type: 'local', class: 'pager' },
                rowSelectClick: function rowSelectClick(e, row) {
                    console.log('Fui Clicado!');
                    return true;
                },
                rowDeleteClick: function rowDeleteClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                rowEditClick: function rowEditClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                rowViewClick: function rowViewClick(e, row) {
                    event.preventDefault();
                    console.log('Fui Clicado!');
                    return false;
                },
                pagerReloadClick: function pagerReloadClick(e, pagerConfig) {
                    console.log('Fui Atualizado!');
                }
            };
        });

        var init = function init() {
            calcularImpostos($scope.contatos);
        };

        var calcularImpostos = function calcularImpostos(contatos) {
            contatos.forEach(function (contato) {
                contato.operadora.precoComImposto = calcularImposto(contato.operadora.preco);
            });
        };

        var carregarContatos = function carregarContatos() {
            contatosAPI.getContatos($scope);
        };

        $scope.apagarContatos = function (contatos) {
            contatos.forEach(function (contato) {
                if (contato.selecionado) contatosAPI.deleteContato($scope, contato);
            });
        };

        $scope.verificarContatoSelecionado = function (contatos) {
            $scope.hasContatoSelecionado = contatos.some(function (contato) {
                return contato.selecionado;
            });
        };

        $scope.ordernarPor = function (campo) {
            $scope.ordenarContato = campo;
            $scope.direcaoOrdenacao = !$scope.direcaoOrdenacao;
        };

        var calcularImposto = function calcularImposto(preco) {
            var imposto = 1.2;
            return preco * imposto;
        };

        (function initController() {
            init();
            //carregarContatos();

            //$timeout(function () { $('table').trigger('footable_redraw'); }, 0);
            $timeout(function () {
                $('.footable').footable();
            }, 0);
        })();
    }
})();
"use strict";

(function () {

	'use strict';

	angular.module("ListaTelefonica").controller("NovoContatoController", ['$scope', 'contatosAPI', 'serialGenerator', '$location', 'operadorasAPI', NovoContatoController]);

	function NovoContatoController($scope, contatosAPI, serialGenerator, $location, operadorasAPI) {

		$scope.operadoras = [];

		operadorasAPI.getOperadoras().then(function (operadoras) {
			$scope.operadoras = operadoras;
		});

		$scope.adicionarContato = function (contato) {
			contato.serial = serialGenerator.generate();
			contato.data = new Date();
			contatosAPI.saveContato($scope, contato);
			$location.path("/contatos");
		};
	}
})();
"use strict";

(function () {

	'use strict';

	// Services are similars with Factories and Providers.

	angular.module("ListaTelefonica").service("operadorasAPI", ['$http', 'config', operadorasAPI]);

	function operadorasAPI($http, config) {

		this.getOperadoras = function () {
			return $http.get(config.oapiUrl + "/operadoras").then(function (data) {
				return JSON.parse(JSON.stringify(data.data));
			});
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("NgMapController", ['$rootScope', '$scope', '$window', '$element', NgMap]);

    function NgMap($rootScope, $scope, $window, $element) {

        var vm = this;

        function initMap() {
            var mapElem = $element[0];

            navigator.geolocation.getCurrentPosition(function (position) {
                var map = new google.maps.Map(mapElem, {
                    center: { lat: position.coords.latitude, lng: position.coords.longitude },
                    zoom: 8
                });
            });
        };

        (function initController() {
            initMap();
        })();
    }
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', httpConfig]);

	function httpConfig($httpProvider) {
		$httpProvider.defaults.cache = true;
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', interceptorConfig]);

	function interceptorConfig($httpProvider) {
		//console.log($httpProvider);
		//$httpProvider.interceptors.push("timeStampInterceptor");
		//$httpProvider.interceptors.push("authInterceptor");
		$httpProvider.interceptors.push("historyInterceptor");
		$httpProvider.interceptors.push("errorInterceptor");
		$httpProvider.interceptors.push("loadingInterceptor");
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$routeProvider', 'config', routeConfig]);

	function routeConfig($routeProvider, config) {

		$routeProvider.when("/:dirName*", {
			templateUrl: function templateUrl(urlattr) {
				console.log(urlattr.dirName.trim().toLowerCase());
				return urlattr.dirName.trim().toLowerCase() == 'auth/login' ? '/shared/security/' + urlattr.dirName + '.html' : '/modules/' + urlattr.dirName + '.html';
			}
		}).otherwise({
			redirectTo: '/ngMap/ngMap'
		});
	}
})();
"use strict";

(function () {

	'use strict';

	// angular.module("ListaTelefonica").value("config", {
	// 	baseJsonUrl: "http://192.168.15.2:3000",
	// 	baseHtmlUrl: "http://192.168.15.2/angulartest"
	// });

	// Constants are similiars with values, but could be inject in Providers.

	angular.module("ListaTelefonica").constant("config", {
		appName: 'NgProgressiveWebApp',
		appInitials: 'NgP',
		appHome: window.location.origin,
		appModules: [],
		template: { templateName: 'template-01', showHeader: true, showFooter: true },
		templates: [{ templateName: 'template-01', showHeader: true, showFooter: true }, { templateName: 'template-02', showHeader: true, showFooter: true }, { templateName: 'template-03', showHeader: true, showFooter: true }],
		defaultRoute: '/picMe/picMe',
		previousRoute: '',
		version: '1.0',
		owner: 'Tiago Carmo Santos',
		year: '2018',
		site: 'https://br.linkedin.com/in/tiagocarmosantos',
		apiUrl: location.hostname.toLowerCase() == 'localhost' ? 'http://localhost:3003/api' : 'https://microservice-sample.herokuapp.com/api',
		oapiUrl: location.hostname.toLowerCase() == 'localhost' ? 'http://localhost:3003/oapi' : 'https://microservice-sample.herokuapp.com/oapi',
		userKey: '_lista_telefonica_app_user',
		user: { ID: null, Name: null, ImageURL: null, Email: null, idToken: null, Logado: false, Anonymous: false, onSignIn: function onSignIn() {}, onSignOut: function onSignOut() {} }
	}).run(['$rootScope', 'config', function ($rootScope, config) {

		fetch(window.location.origin + "/modulesConfig.json").then(function (response) {
			return response.json();
		}).then(function (data) {
			config.appModules = data;
		});

		$rootScope.config = config;
	}]);
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('authInterceptor', ['$rootScope', '$location', authInterceptor]);

	function authInterceptor($rootScope, $location) {
		return {
			request: function request(config) {
				if (config.method.toUpperCase() == 'GET' && config.url.slice(0, 8) == "/modules") {
					$rootScope.config.user.Anonymous = false;
					if (location.hash.indexOf('?') > -1) {
						$rootScope.config.user.Anonymous = location.hash.slice(location.hash.indexOf('?') + 1).split('&').map(function (item) {
							return { key: item.split('=')[0], value: item.split('=')[1] };
						}).filter(function (item) {
							return item.key.toLowerCase() == 'name' && item.value.toLowerCase() == 'anonymous';
						}).length > 0;
					}

					if ($rootScope.config.user.Logado == false && $rootScope.config.user.Anonymous == false) {
						$location.path("/auth/login");
					}
				}
				return config;
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('errorInterceptor', ['$q', '$location', errorInterceptor]);

	function errorInterceptor($q, $location) {
		return {
			responseError: function responseError(rejection) {
				if (rejection.status == 404) {
					$location.path("/error");
				}

				if (rejection.status <= 0) {

					if (rejection.status == -1) {
						//console.log("Rejection Status: " + rejection.status);
						//console.log("Rejection URL: " + rejection.config.url);
						//console.log("Caches: " + caches);
						var deferred = $q.defer();
						caches.match(rejection.config.url).then(function (response) {
							//console.log("Cache Response: " + response);
							if (response) {
								response.json().then(function (json) {
									rejection.data = json;
									rejection.status = 200;
									deferred.resolve(rejection);
									//console.log("Resolve promise with ", rejection);
								});
								//console.log("deferred Reject: " + false);  
							} else {
								//console.log("deferred Reject: " + true);
								return deferred.reject(rejection);
							}
						});
						return deferred.promise;
					}
				}
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('historyInterceptor', ['$rootScope', '$window', '$location', historyInterceptor]);

	function historyInterceptor($rootScope, $window, $location) {
		return {
			request: function request(config) {

				if (config.method.toUpperCase() == 'GET' && config.url.slice(0, 8) == "/modules") {
					$rootScope.config.previousRoute = location.hash.replace('#!', '');
				}

				return config;
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('loadingInterceptor', ['$q', '$rootScope', '$timeout', loadingInterceptor]);

	function loadingInterceptor($q, $rootScope, $timeout) {
		return {
			request: function request(config) {
				$rootScope.loading = true;
				return config;
			},
			requestError: function requestError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			},
			response: function response(_response) {
				$timeout(function () {
					$rootScope.loading = false;
				}, 500);
				return _response;
			},
			responseError: function responseError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('timeStampInterceptor', [timeStampInterceptor]);

	function timeStampInterceptor() {
		return {
			request: function request(config) {
				var url = config.url;
				if (url.indexOf('view') > -1) return config;
				var timeStamp = new Date().getTime();
				config.url = url + "?timestamp=" + timeStamp;
				console.log(config.url);
				return config;
			}
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("loginController", ['$rootScope', '$scope', '$window', loginController]);

    function loginController($rootScope, $scope, $window) {

        var vm = this;

        function onSignIn(googleUser) {
            console.log('User signed in.');

            var profile = googleUser.getBasicProfile();
            vm.User.ID = profile.getId();
            vm.User.Name = profile.getName();
            vm.User.ImageURL = profile.getImageUrl();
            vm.User.Email = profile.getEmail();
            vm.User.Logado = true;
            vm.User.idToken = googleUser.getAuthResponse().id_token;

            var redirectRoute = !!$rootScope.config.previousRoute ? $rootScope.config.previousRoute : $rootScope.config.defaultRoute;
            $window.location.assign($window.location.origin + "/#!" + redirectRoute);
        }

        function onSignOut() {
            gapi.auth2.getAuthInstance().signOut().then(function () {
                console.log('User signed out.');
                initUser();
                $window.location.reload();
            });
        }

        function initUser() {
            return $rootScope.config.user = vm.User = {
                ID: null,
                Name: null,
                ImageURL: null,
                Email: null,
                Logado: false,
                Anonymous: false,
                onSignIn: onSignIn,
                onSignOut: onSignOut
            };
        }

        (function initController() {
            console.log('Login');
            $rootScope.config.template.showFooter = false;
            $rootScope.config.template.showHeader = false;

            document.User = initUser();

            gapi.signin2.render('googleBtn', { onsuccess: vm.User.onSignIn, onfailure: vm.User.onSignOut });
        })();

        // Clean up stuff
        $scope.$on('$destroy', function () {
            //  TODO SOMETHING
            $rootScope.config.template.showFooter = true;
            $rootScope.config.template.showHeader = true;
        });

        // Here your view content is fully loaded !!
        $scope.$on('$viewContentLoaded', function () {
            //  TODO SOMETHING
        });
    }
})();